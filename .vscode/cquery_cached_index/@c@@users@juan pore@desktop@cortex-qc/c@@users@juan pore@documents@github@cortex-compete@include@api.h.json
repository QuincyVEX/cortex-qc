16
{"last_modification_time":1544243986,"language":1,"import_file":"c:/users/juan pore/documents/github/cortex-compete/include/portdef.h","args_hash":12936891875621053888,"includes":[{"line":24,"resolved_path":"c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/stdlib.h"},{"line":25,"resolved_path":"c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stdbool.h"},{"line":26,"resolved_path":"c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stdarg.h"},{"line":27,"resolved_path":"c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stdint.h"}],"dependencies":["c:/users/juan pore/documents/github/cortex-compete/include/portdef.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/stdlib.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/_ansi.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/newlib.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/sys/config.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/sys/features.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/sys/reent.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/sys/_types.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/machine/_types.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/machine/_default_types.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/sys/lock.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/sys/cdefs.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/alloca.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stdint.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/stdint.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/sys/_intsup.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/sys/_stdint.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stdarg.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/machine/ieeefp.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/_newlib_version.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/arm-none-eabi/include/machine/stdlib.h","c:/users/juan pore/appdata/local/programs/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stdbool.h"],"skipped_by_preprocessor":["31:1-33:7","1184:1-1186:6","1619:1-1621:7"],"types":[{"id":0,"usr":13838176792705659279,"detailed_name":"<fundamental>","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":1,"usr":17218651458849137469,"detailed_name":"InterruptHandler","short_name_offset":0,"short_name_size":16,"kind":252,"hover":"typedef void (*InterruptHandler)(unsigned char pin)","comments":"\r\nType definition for interrupt handlers. Such functions must accept one argument indicating\r\nthe pin which changed.","declarations":[],"spell":"337:16-337:32|-1|1|2","extent":"337:1-337:52|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["337:16-337:32|-1|1|4","367:61-367:77|-1|1|4"]},{"id":2,"usr":2,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":3,"usr":12944104586191846285,"detailed_name":"Gyro","short_name_offset":0,"short_name_size":4,"kind":252,"hover":"typedef void * Gyro","comments":"\r\nReference type for an initialized gyro.\r\n\r\nGyro information is stored as an opaque pointer to a structure in memory; as this is a\r\npointer type, it can be safely passed or stored by value.","declarations":[],"spell":"553:16-553:20|-1|1|2","extent":"553:1-553:20|-1|1|0","alias_of":2,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["553:16-553:20|-1|1|4","564:13-564:17|-1|1|4","584:1-584:5|-1|1|4","593:16-593:20|-1|1|4","602:19-602:23|-1|1|4"]},{"id":4,"usr":10804874328188746552,"detailed_name":"Encoder","short_name_offset":0,"short_name_size":7,"kind":252,"hover":"typedef void * Encoder","comments":"\r\nReference type for an initialized encoder.\r\n\r\nEncoder information is stored as an opaque pointer to a structure in memory; as this is a\r\npointer type, it can be safely passed or stored by value.","declarations":[],"spell":"610:16-610:23|-1|1|2","extent":"610:1-610:23|-1|1|0","alias_of":2,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["610:16-610:23|-1|1|4","619:16-619:23|-1|1|4","632:1-632:8|-1|1|4","641:19-641:26|-1|1|4","650:22-650:29|-1|1|4"]},{"id":5,"usr":2245577087213028828,"detailed_name":"Ultrasonic","short_name_offset":0,"short_name_size":10,"kind":252,"hover":"typedef void * Ultrasonic","comments":"\r\nReference type for an initialized ultrasonic sensor.\r\n\r\nUltrasonic information is stored as an opaque pointer to a structure in memory; as this is a\r\npointer type, it can be safely passed or stored by value.","declarations":[],"spell":"663:16-663:26|-1|1|2","extent":"663:1-663:26|-1|1|0","alias_of":2,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["663:16-663:26|-1|1|4","675:19-675:29|-1|1|4","687:1-687:11|-1|1|4","696:25-696:35|-1|1|4"]},{"id":6,"usr":12339929197612516034,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["711:14-711:21|-1|1|4","711:28-711:35|-1|1|4","724:22-724:29|-1|1|4","724:36-724:43|-1|1|4","724:49-724:56|-1|1|4","737:15-737:22|-1|1|4","737:29-737:36|-1|1|4","747:23-747:30|-1|1|4","747:37-747:44|-1|1|4"]},{"id":7,"usr":16508952536183131610,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["711:43-711:51|-1|1|4","724:65-724:73|-1|1|4","737:44-737:52|-1|1|4","747:50-747:58|-1|1|4"]},{"id":8,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":9,"usr":3463308898115373885,"detailed_name":"PROS_FILE","short_name_offset":0,"short_name_size":9,"kind":252,"hover":"typedef int PROS_FILE","comments":"\r\nPROS_FILE is an integer referring to a stream for the standard I/O functions.\r\n\r\nPROS_FILE * is the standard library method of referring to a file pointer, even though there is\r\nactually nothing there.","declarations":[],"spell":"755:13-755:22|-1|1|2","extent":"755:1-755:22|-1|1|0","alias_of":8,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["755:13-755:22|-1|1|4","816:16-816:25|-1|1|4","826:20-826:29|-1|1|4","882:13-882:22|-1|1|4","895:12-895:21|-1|1|4","914:10-914:19|-1|1|4","926:12-926:21|-1|1|4","935:11-935:20|-1|1|4","950:33-950:42|-1|1|4","974:1-974:10|-1|1|4","984:33-984:42|-1|1|4","994:22-994:31|-1|1|4","1004:31-1004:40|-1|1|4","1016:52-1016:61|-1|1|4","1026:11-1026:20|-1|1|4","1034:16-1034:25|-1|1|4","1046:59-1046:68|-1|1|4","1109:13-1109:22|-1|1|4","1163:15-1163:24|-1|1|4","1172:14-1172:23|-1|1|4","1187:55-1187:64|-1|1|4","1199:29-1199:38|-1|1|4","1208:22-1208:31|-1|1|4","1220:17-1220:26|-1|1|4","1226:18-1226:27|-1|1|4"]},{"id":10,"usr":5778908825573379114,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1016:1-1016:7|-1|1|4","1016:25-1016:31|-1|1|4","1016:38-1016:44|-1|1|4","1046:1-1046:7|-1|1|4","1046:32-1046:38|-1|1|4","1046:45-1046:51|-1|1|4","1129:28-1129:34|-1|1|4"]},{"id":11,"usr":15413159717960530228,"detailed_name":"TaskHandle","short_name_offset":0,"short_name_size":10,"kind":252,"hover":"typedef void * TaskHandle","comments":"\r\nType by which tasks are referenced.\r\n\r\nAs this is a pointer type, it can be safely passed or stored by value.","declarations":[],"spell":"1305:16-1305:26|-1|1|2","extent":"1305:1-1305:26|-1|1|0","alias_of":2,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1305:16-1305:26|-1|1|4","1341:1-1341:11|-1|1|4","1392:17-1392:27|-1|1|4","1414:27-1414:37|-1|1|4","1421:36-1421:46|-1|1|4","1432:22-1432:32|-1|1|4","1443:17-1443:27|-1|1|4","1459:1-1459:11|-1|1|4","1468:18-1468:28|-1|1|4"]},{"id":12,"usr":13949500205665617683,"detailed_name":"Mutex","short_name_offset":0,"short_name_size":5,"kind":252,"hover":"typedef void * Mutex","comments":"\r\nType by which mutexes are referenced.\r\n\r\nAs this is a pointer type, it can be safely passed or stored by value.","declarations":[],"spell":"1311:16-1311:21|-1|1|2","extent":"1311:1-1311:21|-1|1|0","alias_of":2,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1311:16-1311:21|-1|1|4","1525:1-1525:6|-1|1|4","1533:16-1533:21|-1|1|4","1545:16-1545:21|-1|1|4","1552:18-1552:23|-1|1|4"]},{"id":13,"usr":5044211371956133651,"detailed_name":"Semaphore","short_name_offset":0,"short_name_size":9,"kind":252,"hover":"typedef void * Semaphore","comments":"\r\nType by which semaphores are referenced.\r\n\r\nAs this is a pointer type, it can be safely passed or stored by value.","declarations":[],"spell":"1317:16-1317:25|-1|1|2","extent":"1317:1-1317:25|-1|1|0","alias_of":2,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1317:16-1317:25|-1|1|4","1482:1-1482:10|-1|1|4","1494:20-1494:29|-1|1|4","1504:20-1504:29|-1|1|4","1511:22-1511:31|-1|1|4"]},{"id":14,"usr":16113855948617838107,"detailed_name":"TaskCode","short_name_offset":0,"short_name_size":8,"kind":252,"hover":"typedef void (*TaskCode)(void *)","comments":"\r\nType for defining task functions. Task functions must accept one parameter of type\r\n\"void *\"; they need not use it.\r\n\r\nFor example:\r\n\r\nvoid MyTask(void *ignore) {\r\n    while (1);\r\n}","declarations":[],"spell":"1328:16-1328:24|-1|1|2","extent":"1328:1-1328:33|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1328:16-1328:24|-1|1|4","1341:23-1341:31|-1|1|4"]}],"funcs":[{"id":0,"usr":15649713314111466463,"detailed_name":"_Bool isAutonomous()","short_name_offset":6,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\r\nReturns true if the robot is in autonomous mode, or false otherwise.\r\n\r\nWhile in autonomous mode, joystick inputs will return a neutral value, but serial port\r\ncommunications (even over VexNET) will still work properly.","declarations":[{"spell":"73:6-73:18|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":11924310206745737757,"detailed_name":"_Bool isEnabled()","short_name_offset":6,"short_name_size":9,"kind":12,"storage":1,"hover":"","comments":"\r\nReturns true if the robot is enabled, or false otherwise.\r\n\r\nWhile disabled via the VEX Competition Switch or VEX Field Controller, motors will not\r\nfunction. However, the digital I/O ports can still be changed, which may indirectly affect\r\nthe robot state (e.g. solenoids). Avoid performing externally visible actions while\r\ndisabled (the kernel should take care of this most of the time).","declarations":[{"spell":"82:6-82:15|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":13740918397534524849,"detailed_name":"_Bool isJoystickConnected(unsigned char joystick)","short_name_offset":6,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\r\nReturns true if a joystick is connected to the specified slot number (1 or 2), or false\r\notherwise.\r\n\r\nUseful for automatically merging joysticks for one operator, or splitting for two. This\r\nfunction does not work properly during initialize() or initializeIO() and can return false\r\npositives. It should be checked once and stored at the beginning of operatorControl().\r\n\r\n@param joystick the joystick slot to check","declarations":[{"spell":"93:6-93:25|-1|1|1","param_spellings":["93:40-93:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":9483049048933045379,"detailed_name":"_Bool isOnline()","short_name_offset":6,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"\r\nReturns true if a VEX field controller or competition switch is connected, or false\r\notherwise.\r\n\r\nWhen in online mode, the switching between autonomous() and operatorControl() tasks is\r\nmanaged by the PROS kernel.","declarations":[{"spell":"101:6-101:14|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":16955196749859571634,"detailed_name":"int joystickGetAnalog(unsigned char joystick, unsigned char axis)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\r\nGets the value of a control axis on the VEX joystick. Returns the value from -127 to 127,\r\nor 0 if no joystick is connected to the requested slot.\r\n\r\n@param joystick the joystick slot to check\r\n@param axis one of 1, 2, 3, 4, ACCEL_X, or ACCEL_Y","declarations":[{"spell":"109:5-109:22|-1|1|1","param_spellings":["109:37-109:45","109:61-109:65"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":15259717676604550619,"detailed_name":"_Bool joystickGetDigital(unsigned char joystick, unsigned char buttonGroup, unsigned char button)","short_name_offset":6,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\r\nGets the value of a button on the VEX joystick. Returns true if that button is pressed, or\r\nfalse otherwise. If no joystick is connected to the requested slot, returns false.\r\n\r\n@param joystick the joystick slot to check\r\n@param buttonGroup one of 5, 6, 7, or 8 to request that button as labelled on the joystick\r\n@param button one of JOY_UP, JOY_DOWN, JOY_LEFT, or JOY_RIGHT; requesting JOY_LEFT or\r\nJOY_RIGHT for groups 5 or 6 will cause an undefined value to be returned","declarations":[{"spell":"119:6-119:24|-1|1|1","param_spellings":["119:39-119:47","119:63-119:74","120:16-120:22"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":6080751478684135224,"detailed_name":"unsigned int powerLevelBackup()","short_name_offset":13,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\r\nReturns the backup battery voltage in millivolts.\r\n\r\nIf no backup battery is connected, returns 0.","declarations":[{"spell":"126:14-126:30|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":17419066529909152080,"detailed_name":"unsigned int powerLevelMain()","short_name_offset":13,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\r\nReturns the main battery voltage in millivolts.\r\n\r\nIn rare circumstances, this method might return 0. Check the output value for reasonability\r\nbefore blindly blasting the user.","declarations":[{"spell":"133:14-133:28|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":2997210326379819081,"detailed_name":"void setTeamName(const char *name)","short_name_offset":5,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\r\nSets the team name displayed to the VEX field control and VEX Firmware Upgrade.\r\n\r\n@param name a string containing the team name; only the first eight characters will be shown","declarations":[{"spell":"139:6-139:17|-1|1|1","param_spellings":["139:30-139:34"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":3608377712931685227,"detailed_name":"int analogCalibrate(unsigned char channel)","short_name_offset":4,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\r\nCalibrates the analog sensor on the specified channel.\r\n\r\nThis method assumes that the true sensor value is not actively changing at this time and\r\ncomputes an average from approximately 500 samples, 1 ms apart, for a 0.5 s period of\r\ncalibration. The average value thus calculated is returned and stored for later calls to the\r\nanalogReadCalibrated() and analogReadCalibratedHR() functions. These functions will return\r\nthe difference between this value and the current sensor value when called.\r\n\r\nDo not use this function in initializeIO(), or when the sensor value might be unstable\r\n(gyro rotation, accelerometer movement).\r\n\r\nThis function may not work properly if the VEX Cortex is tethered to a PC using the orange\r\nUSB A to A cable and has no VEX 7.2V Battery connected and powered on, as the VEX Battery\r\nprovides power to sensors.\r\n\r\n@param channel the channel to calibrate from 1-8\r\n@return the average sensor value computed by this function","declarations":[{"spell":"226:5-226:20|-1|1|1","param_spellings":["226:35-226:42"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":17838590685809643168,"detailed_name":"int analogRead(unsigned char channel)","short_name_offset":4,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\r\nReads an analog input channel and returns the 12-bit value.\r\n\r\nThe value returned is undefined if the analog pin has been switched to a different mode.\r\nThis function is Wiring-compatible with the exception of the larger output range. The\r\nmeaning of the returned value varies depending on the sensor attached.\r\n\r\nThis function may not work properly if the VEX Cortex is tethered to a PC using the orange\r\nUSB A to A cable and has no VEX 7.2V Battery connected and powered on, as the VEX Battery\r\nprovides power to sensors.\r\n\r\n@param channel the channel to read from 1-8\r\n@return the analog sensor value, where a value of 0 reflects an input voltage of nearly 0 V\r\nand a value of 4095 reflects an input voltage of nearly 5 V","declarations":[{"spell":"242:5-242:15|-1|1|1","param_spellings":["242:30-242:37"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":9872717420063525368,"detailed_name":"int analogReadCalibrated(unsigned char channel)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\r\nReads the calibrated value of an analog input channel.\r\n\r\nThe analogCalibrate() function must be run first on that channel. This function is\r\ninappropriate for sensor values intended for integration, as round-off error can accumulate\r\ncausing drift over time. Use analogReadCalibratedHR() instead.\r\n\r\nThis function may not work properly if the VEX Cortex is tethered to a PC using the orange\r\nUSB A to A cable and has no VEX 7.2V Battery connected and powered on, as the VEX Battery\r\nprovides power to sensors.\r\n\r\n@param channel the channel to read from 1-8\r\n@return the difference of the sensor value from its calibrated default from -4095 to 4095","declarations":[{"spell":"257:5-257:25|-1|1|1","param_spellings":["257:40-257:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":9824019429484558704,"detailed_name":"int analogReadCalibratedHR(unsigned char channel)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\r\nReads the calibrated value of an analog input channel 1-8 with enhanced precision.\r\n\r\nThe analogCalibrate() function must be run first. This is intended for integrated sensor\r\nvalues such as gyros and accelerometers to reduce drift due to round-off, and should not be\r\nused on a sensor such as a line tracker or potentiometer.\r\n\r\nThe value returned actually has 16 bits of \"precision\", even though the ADC only reads\r\n12 bits, so that errors induced by the average value being between two values come out\r\nin the wash when integrated over time. Think of the value as the true value times 16.\r\n\r\nThis function may not work properly if the VEX Cortex is tethered to a PC using the orange\r\nUSB A to A cable and has no VEX 7.2V Battery connected and powered on, as the VEX Battery\r\nprovides power to sensors.\r\n\r\n@param channel the channel to read from 1-8\r\n@return the difference of the sensor value from its calibrated default from -16384 to 16384","declarations":[{"spell":"276:5-276:27|-1|1|1","param_spellings":["276:42-276:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":6988363835218732084,"detailed_name":"_Bool digitalRead(unsigned char pin)","short_name_offset":6,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\r\nGets the digital value (1 or 0) of a pin configured as a digital input.\r\n\r\nIf the pin is configured as some other mode, the digital value which reflects the current\r\nstate of the pin is returned, which may or may not differ from the currently set value. The\r\nreturn value is undefined for pins configured as Analog inputs, or for ports in use by a\r\nCommunications interface. This function is Wiring-compatible.\r\n\r\nThis function may not work properly if the VEX Cortex is tethered to a PC using the orange\r\nUSB A to A cable and has no VEX 7.2V Battery connected and powered on, as the VEX Battery\r\nprovides power to sensors.\r\n\r\n@param pin the pin to read from 1-26\r\n@return true if the pin is HIGH, or false if it is LOW","declarations":[{"spell":"292:6-292:17|-1|1|1","param_spellings":["292:32-292:35"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":6794181520617010132,"detailed_name":"void digitalWrite(unsigned char pin, _Bool value)","short_name_offset":5,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\r\nSets the digital value (1 or 0) of a pin configured as a digital output.\r\n\r\nIf the pin is configured as some other mode, behavior is undefined. This function is\r\nWiring-compatible.\r\n\r\n@param pin the pin to write from 1-26\r\n@param value an expression evaluating to \"true\" or \"false\" to set the output to HIGH or LOW\r\nrespectively, or the constants HIGH or LOW themselves","declarations":[{"spell":"303:6-303:18|-1|1|1","param_spellings":["303:33-303:36","303:43-303:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":11146228526319408947,"detailed_name":"void pinMode(unsigned char pin, unsigned char mode)","short_name_offset":5,"short_name_size":7,"kind":12,"storage":1,"hover":"","comments":"\r\nConfigures the pin as an input or output with a variety of settings.\r\n\r\nDo note that INPUT by default turns on the pull-up resistor, as most VEX sensors are\r\nopen-drain active low. It should not be a big deal for most push-pull sources. This function\r\nis Wiring-compatible.\r\n\r\n@param pin the pin to modify from 1-26\r\n@param mode one of INPUT, INPUT_ANALOG, INPUT_FLOATING, OUTPUT, or OUTPUT_OD","declarations":[{"spell":"314:6-314:13|-1|1|1","param_spellings":["314:28-314:31","314:47-314:51"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":11529800572759692726,"detailed_name":"void ioClearInterrupt(unsigned char pin)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\r\nDisables interrupts on the specified pin.\r\n\r\nDisabling interrupts on interrupt pins which are not in use conserves processing time.\r\n\r\n@param pin the pin on which to reset interrupts from 1-9,11-12","declarations":[{"spell":"346:6-346:22|-1|1|1","param_spellings":["346:37-346:40"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":4520198140608383669,"detailed_name":"void ioSetInterrupt(unsigned char pin, unsigned char edges, InterruptHandler handler)","short_name_offset":5,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\r\nSets up an interrupt to occur on the specified pin, and resets any counters or timers\r\nassociated with the pin.\r\n\r\nEach time the specified change occurs, the function pointer passed in will be called with\r\nthe pin that changed as an argument. Enabling pin-change interrupts consumes processing\r\ntime, so it is best to only enable necessary interrupts and to keep the InterruptHandler\r\nfunction short. Pin change interrupts can only be enabled on pins 1-9 and 11-12.\r\n\r\nDo not use API functions such as delay() inside the handler function, as the function will\r\nrun in an ISR where the scheduler is paused and no other interrupts can execute. It is best\r\nto quickly update some state and allow a task to perform the work.\r\n\r\nDo not use this function on pins that are also being used by the built-in ultrasonic or\r\nshaft encoder drivers, or on pins which have been switched to output mode.\r\n\r\n@param pin the pin on which to enable interrupts from 1-9,11-12\r\n@param edges one of INTERRUPT_EDGE_RISING, INTERRUPT_EDGE_FALLING, or INTERRUPT_EDGE_BOTH\r\n@param handler the function to call when the condition is satisfied","declarations":[{"spell":"367:6-367:20|-1|1|1","param_spellings":["367:35-367:38","367:54-367:59","367:78-367:85"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":13144074942603912286,"detailed_name":"int motorGet(unsigned char channel)","short_name_offset":4,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"\r\nGets the last set speed of the specified motor channel.\r\n\r\nThis speed may have been set by any task or the PROS kernel itself. This is not guaranteed\r\nto be the speed that the motor is actually running at, or even the speed currently being\r\nsent to the motor, due to latency in the Motor Controller 29 protocol and physical loading.\r\nTo measure actual motor shaft revolution speed, attach a VEX Integrated Motor Encoder or\r\nVEX Quadrature Encoder and use the velocity functions associated with each.\r\n\r\n@param channel the motor channel to fetch from 1-10\r\n@return the speed last sent to this channel; -127 is full reverse and 127 is full forward,\r\nwith 0 being off","declarations":[{"spell":"384:5-384:13|-1|1|1","param_spellings":["384:28-384:35"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":4176356990605629303,"detailed_name":"void motorSet(unsigned char channel, int speed)","short_name_offset":5,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"\r\nSets the speed of the specified motor channel.\r\n\r\nDo not use motorSet() with the same channel argument from two different tasks. It is safe to\r\nuse motorSet() with different channel arguments from different tasks.\r\n\r\n@param channel the motor channel to modify from 1-10\r\n@param speed the new signed speed; -127 is full reverse and 127 is full forward, with 0\r\nbeing off","declarations":[{"spell":"395:6-395:14|-1|1|1","param_spellings":["395:29-395:36","395:42-395:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":8597586304301303695,"detailed_name":"void motorStop(unsigned char channel)","short_name_offset":5,"short_name_size":9,"kind":12,"storage":1,"hover":"","comments":"\r\nStops the motor on the specified channel, equivalent to calling motorSet() with an argument\r\nof zero.\r\n\r\nThis performs a coasting stop, not an active brake. Since motorStop is similar to\r\nmotorSet(0), see the note for motorSet() about use from multiple tasks.\r\n\r\n@param channel the motor channel to stop from 1-10","declarations":[{"spell":"405:6-405:15|-1|1|1","param_spellings":["405:30-405:37"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":18189449027136871165,"detailed_name":"void motorStopAll()","short_name_offset":5,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\r\nStops all motors; significantly faster than looping through all motor ports and calling\r\nmotorSet(channel, 0) on each one.","declarations":[{"spell":"410:6-410:18|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":2429026716472080737,"detailed_name":"void speakerInit()","short_name_offset":5,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\r\nInitializes VEX speaker support.\r\n\r\nThe VEX speaker is not thread safe; it can only be used from one task at a time. Using the\r\nVEX speaker may impact robot performance. Teams may benefit from an if statement that only\r\nenables sound if isOnline() returns false.","declarations":[{"spell":"419:6-419:17|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":6217927314048270823,"detailed_name":"void speakerPlayArray(const char **songs)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\r\nPlays up to three RTTTL (Ring Tone Text Transfer Language) songs simultaneously over the\r\nVEX speaker. The audio is mixed to allow polyphonic sound to be played. Many simple songs\r\nare available in RTTTL format online, or compose your own.\r\n\r\nThe song must not be NULL, but unused tracks within the song can be set to NULL. If any of\r\nthe three song tracks is invalid, the result of this function is undefined.\r\n\r\nThe VEX speaker is not thread safe; it can only be used from one task at a time. Using the\r\nVEX speaker may impact robot performance. Teams may benefit from an if statement that only\r\nenables sound if isOnline() returns false.\r\n\r\n@param songs an array of up to three (3) RTTTL songs as string values to play","declarations":[{"spell":"434:6-434:22|-1|1|1","param_spellings":["434:38-434:43"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":9392936909401653205,"detailed_name":"void speakerPlayRtttl(const char *song)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\r\nPlays an RTTTL (Ring Tone Text Transfer Language) song over the VEX speaker. Many simple\r\nsongs are available in RTTTL format online, or compose your own.\r\n\r\nThe song must not be NULL. If an invalid song is specified, the result of this function is\r\nundefined.\r\n\r\nThe VEX speaker is not thread safe; it can only be used from one task at a time. Using the\r\nVEX speaker may impact robot performance. Teams may benefit from an if statement that only\r\nenables sound if isOnline() returns false.\r\n\r\n@param song the RTTTL song as a string value to play","declarations":[{"spell":"448:6-448:22|-1|1|1","param_spellings":["448:35-448:39"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":4265457775227675346,"detailed_name":"void speakerShutdown()","short_name_offset":5,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\r\nPowers down and disables the VEX speaker.\r\n\r\nIf a song is currently being played in another task, the behavior of this function is\r\nundefined, since the VEX speaker is not thread safe.","declarations":[{"spell":"455:6-455:21|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":1947823397997096115,"detailed_name":"unsigned int imeInitializeAll()","short_name_offset":13,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\r\nInitializes all IMEs.\r\n\r\nIMEs are assigned sequential incrementing addresses, beginning with the first IME on the\r\nchain (closest to the VEX Cortex I2C port). Therefore, a given configuration of IMEs will\r\nalways have the same ID assigned to each encoder. The addresses range from 0 to\r\nIME_ADDR_MAX, so the first encoder gets 0, the second gets 1, ...\r\n\r\nThis function should most likely be used in initialize(). Do not use it in initializeIO() or\r\nat any other time when the scheduler is paused (like an interrupt). Checking the return\r\nvalue of this function is important to ensure that all IMEs are plugged in and responding as\r\nexpected.\r\n\r\nThis function, unlike the other IME functions, is not thread safe. If using imeInitializeAll\r\nto re-initialize encoders, calls to other IME functions might behave unpredictably during\r\nthis function's execution.\r\n\r\n@return the number of IMEs successfully initialized.","declarations":[{"spell":"484:14-484:30|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":27,"usr":5058140733392099284,"detailed_name":"_Bool imeGet(unsigned char address, int *value)","short_name_offset":6,"short_name_size":6,"kind":12,"storage":1,"hover":"","comments":"\r\nGets the current 32-bit count of the specified IME.\r\n\r\nMuch like the count for a quadrature encoder, the tick count is signed and cumulative.\r\nThe value reflects total counts since the last reset. Different VEX Motor Encoders have a\r\ndifferent number of counts per revolution:\r\n\r\n* \\c 240.448 for the 269 IME\r\n* \\c 627.2 for the 393 IME in high torque mode (factory default)\r\n* \\c 392 for the 393 IME in high speed mode\r\n\r\nIf the IME address is invalid, or the IME has not been reset or initialized, the value\r\nstored in *value is undefined.\r\n\r\n@param address the IME address to fetch from 0 to IME_ADDR_MAX\r\n@param value a pointer to the location where the value will be stored (obtained using the\r\n\"&\" operator on the target variable name e.g. <code>imeGet(2, &counts)</code>)\r\n@return true if the count was successfully read and the value stored in *value is valid;\r\nfalse otherwise","declarations":[{"spell":"505:6-505:12|-1|1|1","param_spellings":["505:27-505:34","505:41-505:46"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":28,"usr":6712745979570403258,"detailed_name":"_Bool imeGetVelocity(unsigned char address, int *value)","short_name_offset":6,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\r\nGets the current rotational velocity of the specified IME.\r\n\r\nIn this version of PROS, the velocity is positive if the IME count is increasing and\r\nnegative if the IME count is decreasing. The velocity is in RPM of the internal encoder\r\nwheel. Since checking the IME for its type cannot reveal whether the motor gearing is\r\nhigh speed or high torque (in the 2-Wire Motor 393 case), the user must divide the return\r\nvalue by the number of output revolutions per encoder revolution:\r\n\r\n* \\c 30.056 for the 269 IME\r\n* \\c 39.2 for the 393 IME in high torque mode (factory default)\r\n* \\c 24.5 for the 393 IME in high speed mode\r\n\r\nIf the IME address is invalid, or the IME has not been reset or initialized, the value\r\nstored in *value is undefined.\r\n\r\n@param address the IME address to fetch from 0 to IME_ADDR_MAX\r\n@param value a pointer to the location where the value will be stored (obtained using the\r\n\"&\" operator on the target variable name e.g. <code>imeGetVelocity(2, &counts)</code>)\r\n@return true if the velocity was successfully read and the value stored in *value is valid;\r\nfalse otherwise","declarations":[{"spell":"528:6-528:20|-1|1|1","param_spellings":["528:35-528:42","528:49-528:54"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":29,"usr":11044617649275605252,"detailed_name":"_Bool imeReset(unsigned char address)","short_name_offset":6,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"\r\nResets the specified IME's counters to zero.\r\n\r\nThis method can be used while the IME is rotating.\r\n\r\n@param address the IME address to reset from 0 to IME_ADDR_MAX\r\n@return true if the reset succeeded; false otherwise","declarations":[{"spell":"537:6-537:14|-1|1|1","param_spellings":["537:29-537:36"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":30,"usr":18172857203269631721,"detailed_name":"void imeShutdown()","short_name_offset":5,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\r\nShuts down all IMEs on the chain; their addresses return to the default and the stored\r\ncounts and velocities are lost. This function, unlike the other IME functions, is not\r\nthread safe.\r\n\r\nTo use the IME chain again, wait at least 0.25 seconds before using imeInitializeAll again.","declarations":[{"spell":"545:6-545:17|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":31,"usr":17479116462544715734,"detailed_name":"int gyroGet(Gyro gyro)","short_name_offset":4,"short_name_size":7,"kind":12,"storage":1,"hover":"","comments":"\r\nGets the current gyro angle in degrees, rounded to the nearest degree.\r\n\r\nThere are 360 degrees in a circle.\r\n\r\n@param gyro the Gyro object from gyroInit() to read\r\n@return the signed and cumulative number of degrees rotated around the gyro's vertical axis\r\nsince the last start or reset","declarations":[{"spell":"564:5-564:12|-1|1|1","param_spellings":["564:18-564:22"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":14613933558036510892,"detailed_name":"Gyro gyroInit(unsigned char port, unsigned short multiplier)","short_name_offset":5,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"\r\nInitializes and enables a gyro on an analog port.\r\n\r\nNULL will be returned if the port is invalid or the gyro is already in use. Initializing a\r\ngyro implicitly calibrates it and resets its count. Do not move the robot while the gyro is\r\nbeing calibrated. It is suggested to call this function in initialize() and to place the\r\nrobot in its final position before powering it on.\r\n\r\nThe multiplier parameter can tune the gyro to adapt to specific sensors. The default value\r\nat this time is 196; higher values will increase the number of degrees reported for a fixed\r\nactual rotation, while lower values will decrease the number of degrees reported. If your\r\nrobot is consistently turning too far, increase the multiplier, and if it is not turning\r\nfar enough, decrease the multiplier.\r\n\r\n@param port the analog port to use from 1-8\r\n@param multiplier an optional constant to tune the gyro readings; use 0 for the default\r\nvalue\r\n@return a Gyro object to be stored and used for later calls to gyro functions","declarations":[{"spell":"584:6-584:14|-1|1|1","param_spellings":["584:29-584:33","584:50-584:60"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":15748816258394742241,"detailed_name":"void gyroReset(Gyro gyro)","short_name_offset":5,"short_name_size":9,"kind":12,"storage":1,"hover":"","comments":"\r\nResets the gyro to zero.\r\n\r\nIt is safe to use this method while a gyro is enabled. It is not necessary to call this\r\nmethod before stopping or starting a gyro.\r\n\r\n@param gyro the Gyro object from gyroInit() to reset","declarations":[{"spell":"593:6-593:15|-1|1|1","param_spellings":["593:21-593:25"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":34,"usr":8056814633571613465,"detailed_name":"void gyroShutdown(Gyro gyro)","short_name_offset":5,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\r\nStops and disables the gyro.\r\n\r\nGyros use processing power, so disabling unused gyros increases code performance.\r\nThe gyro's position will be retained.\r\n\r\n@param gyro the Gyro object from gyroInit() to stop","declarations":[{"spell":"602:6-602:18|-1|1|1","param_spellings":["602:24-602:28"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":35,"usr":10065823988216684717,"detailed_name":"int encoderGet(Encoder enc)","short_name_offset":4,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\r\nGets the number of ticks recorded by the encoder.\r\n\r\nThere are 360 ticks in one revolution.\r\n\r\n@param enc the Encoder object from encoderInit() to read\r\n@return the signed and cumulative number of counts since the last start or reset","declarations":[{"spell":"619:5-619:15|-1|1|1","param_spellings":["619:24-619:27"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":36,"usr":10765667924168564179,"detailed_name":"Encoder encoderInit(unsigned char portTop, unsigned char portBottom, _Bool reverse)","short_name_offset":8,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\r\nInitializes and enables a quadrature encoder on two digital ports.\r\n\r\nNeither the top port nor the bottom port can be digital port 10. NULL will be returned if\r\neither port is invalid or the encoder is already in use. Initializing an encoder implicitly\r\nresets its count.\r\n\r\n@param portTop the \"top\" wire from the encoder sensor with the removable cover side UP\r\n@param portBottom the \"bottom\" wire from the encoder sensor\r\n@param reverse if \"true\", the sensor will count in the opposite direction\r\n@return an Encoder object to be stored and used for later calls to encoder functions","declarations":[{"spell":"632:9-632:20|-1|1|1","param_spellings":["632:35-632:42","632:58-632:68","632:75-632:82"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":2946173113134299622,"detailed_name":"void encoderReset(Encoder enc)","short_name_offset":5,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\r\nResets the encoder to zero.\r\n\r\nIt is safe to use this method while an encoder is enabled. It is not necessary to call this\r\nmethod before stopping or starting an encoder.\r\n\r\n@param enc the Encoder object from encoderInit() to reset","declarations":[{"spell":"641:6-641:18|-1|1|1","param_spellings":["641:27-641:30"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":38,"usr":10275044340215040454,"detailed_name":"void encoderShutdown(Encoder enc)","short_name_offset":5,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\r\nStops and disables the encoder.\r\n\r\nEncoders use processing power, so disabling unused encoders increases code performance.\r\nThe encoder's count will be retained.\r\n\r\n@param enc the Encoder object from encoderInit() to stop","declarations":[{"spell":"650:6-650:21|-1|1|1","param_spellings":["650:30-650:33"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":39,"usr":8316982592527086879,"detailed_name":"int ultrasonicGet(Ultrasonic ult)","short_name_offset":4,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\r\nGets the current ultrasonic sensor value in centimeters.\r\n\r\nIf no object was found or if the ultrasonic sensor is polled while it is pinging and waiting\r\nfor a response, -1 (ULTRA_BAD_RESPONSE) is returned.\r\nIf the ultrasonic sensor was never started, the return value is undefined. Round and fluffy\r\nobjects can cause inaccurate values to be returned.\r\n\r\n@param ult the Ultrasonic object from ultrasonicInit() to read\r\n@return the distance to the nearest object in centimeters","declarations":[{"spell":"675:5-675:18|-1|1|1","param_spellings":["675:30-675:33"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":40,"usr":6533158269121502954,"detailed_name":"Ultrasonic ultrasonicInit(unsigned char portEcho, unsigned char portPing)","short_name_offset":11,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\r\nInitializes an ultrasonic sensor on the specified digital ports.\r\n\r\nThe ultrasonic sensor will be polled in the background in concert with the other sensors\r\nregistered using this method. NULL will be returned if either port is invalid or the\r\nultrasonic sensor port is already in use.\r\n\r\n@param portEcho the port connected to the orange cable from 1-9,11-12\r\n@param portPing the port connected to the yellow cable from 1-12\r\n@return an Ultrasonic object to be stored and used for later calls to ultrasonic functions","declarations":[{"spell":"687:12-687:26|-1|1|1","param_spellings":["687:41-687:49","687:65-687:73"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":41,"usr":9266017143736376552,"detailed_name":"void ultrasonicShutdown(Ultrasonic ult)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\r\nStops and disables the ultrasonic sensor.\r\n\r\nThe last distance it had before stopping will be retained. One more ping operation may occur\r\nbefore the sensor is fully disabled.\r\n\r\n@param ult the Ultrasonic object from ultrasonicInit() to stop","declarations":[{"spell":"696:6-696:24|-1|1|1","param_spellings":["696:36-696:39"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":42,"usr":14046417414301952422,"detailed_name":"_Bool i2cRead(uint8_t addr, uint8_t *data, uint16_t count)","short_name_offset":6,"short_name_size":7,"kind":12,"storage":1,"hover":"","comments":"---- I2C port control ----\r\n\r\ni2cRead - Reads the specified number of data bytes from the specified 7-bit I2C address. The\r\nbytes will be stored at the specified location. Returns true if successful or false if\r\nfailed. If only some bytes could be read, false is still returned.\r\n\r\nThe I2C address should be right-aligned; the R/W bit is automatically supplied.\r\n\r\nSince most I2C devices use an 8-bit register architecture, this method has limited\r\nusefulness. Consider i2cReadRegister instead for the vast majority of applications.","declarations":[{"spell":"711:6-711:13|-1|1|1","param_spellings":["711:22-711:26","711:37-711:41","711:52-711:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":43,"usr":17662526144352827681,"detailed_name":"_Bool i2cReadRegister(uint8_t addr, uint8_t reg, uint8_t *value, uint16_t count)","short_name_offset":6,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\r\ni2cReadRegister - Reads the specified amount of data from the given register address on\r\nthe specified 7-bit I2C address. Returns true if successful or false if failed. If only some\r\nbytes could be read, false is still returned.\r\n\r\nThe I2C address should be right-aligned; the R/W bit is automatically supplied.\r\n\r\nMost I2C devices support an auto-increment address feature, so using this method to read\r\nmore than one byte will usually read a block of sequential registers. Try to merge reads to\r\nseparate registers into a larger read using this function whenever possible to improve code\r\nreliability, even if a few intermediate values need to be thrown away.","declarations":[{"spell":"724:6-724:21|-1|1|1","param_spellings":["724:30-724:34","724:44-724:47","724:58-724:63","724:74-724:79"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":44,"usr":16265506667363587238,"detailed_name":"_Bool i2cWrite(uint8_t addr, uint8_t *data, uint16_t count)","short_name_offset":6,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"\r\ni2cWrite - Writes the specified number of data bytes to the specified 7-bit I2C address.\r\nReturns true if successful or false if failed. If only smoe bytes could be written, false\r\nis still returned.\r\n\r\nThe I2C address should be right-aligned; the R/W bit is automatically supplied.\r\n\r\nSince most I2C devices use an 8-bit register architecture, this method is mostly useful for\r\nsetting the register position (most devices remember the last-used address) or writing a\r\nsequence of bytes to one register address using an auto-increment feature. In these cases,\r\nthe first byte written from the data buffer should have the register address to use.","declarations":[{"spell":"737:6-737:14|-1|1|1","param_spellings":["737:23-737:27","737:38-737:42","737:53-737:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":45,"usr":16757136796330563084,"detailed_name":"_Bool i2cWriteRegister(uint8_t addr, uint8_t reg, uint16_t value)","short_name_offset":6,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\r\ni2cWriteRegister - Writes the specified data byte to a register address on the specified\r\n7-bit I2C address. Returns true if successful or false if failed.\r\n\r\nThe I2C address should be right-aligned; the R/W bit is automatically supplied.\r\n\r\nOnly one byte can be written to each register address using this method. While useful for\r\nthe vast majority of I2C operations, writing multiple bytes requires the i2cWrite method.","declarations":[{"spell":"747:6-747:22|-1|1|1","param_spellings":["747:31-747:35","747:45-747:48","747:59-747:64"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":46,"usr":6704289941009473222,"detailed_name":"void usartInit(PROS_FILE *usart, unsigned int baud, unsigned int flags)","short_name_offset":5,"short_name_size":9,"kind":12,"storage":1,"hover":"","comments":"\r\nInitialize the specified serial interface with the given connection parameters.\r\n\r\nI/O to the port is accomplished using the \"standard\" I/O functions such as fputs(),\r\nfprintf(), and fputc().\r\n\r\nRe-initializing an open port may cause loss of data in the buffers. This routine may be\r\nsafely called from initializeIO() or when the scheduler is paused. If I/O is attempted on a\r\nserial port which has never been opened, the behavior will be the same as if the port had\r\nbeen disabled.\r\n\r\n@param usart the port to open, either \"uart1\" or \"uart2\"\r\n@param baud the baud rate to use from 2400 to 1000000 baud\r\n@param flags a bit mask combination of the SERIAL_* flags specifying parity, stop, and data\r\nbits","declarations":[{"spell":"816:6-816:15|-1|1|1","param_spellings":["816:27-816:32","816:47-816:51","816:66-816:71"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":47,"usr":10298716725805039519,"detailed_name":"void usartShutdown(PROS_FILE *usart)","short_name_offset":5,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\r\nDisables the specified USART interface.\r\n\r\nAny data in the transmit and receive buffers will be lost. Attempts to read from the port\r\nwhen it is disabled will deadlock, and attempts to write to it may deadlock depending on\r\nthe state of the buffer.\r\n\r\n@param usart the port to close, either \"uart1\" or \"uart2\"","declarations":[{"spell":"826:6-826:19|-1|1|1","param_spellings":["826:31-826:36"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":48,"usr":1193712170905275223,"detailed_name":"void fclose(PROS_FILE *stream)","short_name_offset":5,"short_name_size":6,"kind":12,"storage":1,"hover":"","comments":"\r\nCloses the specified file descriptor. This function does not work on communication ports;\r\nuse usartShutdown() instead.\r\n\r\n@param stream the file descriptor to close from fopen()","declarations":[{"spell":"882:6-882:12|-1|1|1","param_spellings":["882:24-882:30"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":49,"usr":712337344994872672,"detailed_name":"int fcount(PROS_FILE *stream)","short_name_offset":4,"short_name_size":6,"kind":12,"storage":1,"hover":"","comments":"\r\nReturns the number of characters that can be read without blocking (the number of\r\ncharacters available) from the specified stream. This only works for communication ports and\r\nfiles in Read mode; for files in Write mode, 0 is always returned.\r\n\r\nThis function may underestimate, but will not overestimate, the number of characters which\r\nmeet this criterion.\r\n\r\n@param stream the stream to read (stdin, uart1, uart2, or an open file in Read mode)\r\n@return the number of characters which meet this criterion; if this number cannot be\r\ndetermined, returns 0","declarations":[{"spell":"895:5-895:11|-1|1|1","param_spellings":["895:23-895:29"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":50,"usr":11636398030959634053,"detailed_name":"int fdelete(const char *file)","short_name_offset":4,"short_name_size":7,"kind":12,"storage":1,"hover":"","comments":"\r\nDelete the specified file if it exists and is not currently open.\r\n\r\nThe file will actually be erased from memory on the next re-boot. A physical power cycle is\r\nrequired to purge deleted files and free their allocated space for new files to be written.\r\nDeleted files are still considered inaccessible to fopen() in Read mode.\r\n\r\n@param file the file name to erase\r\n@return 0 if the file was deleted, or 1 if the file could not be found","declarations":[{"spell":"906:5-906:12|-1|1|1","param_spellings":["906:25-906:29"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":51,"usr":11145877964038468670,"detailed_name":"int feof(PROS_FILE *stream)","short_name_offset":4,"short_name_size":4,"kind":12,"storage":1,"hover":"","comments":"\r\nChecks to see if the specified stream is at its end. This only works for communication ports\r\nand files in Read mode; for files in Write mode, 1 is always returned.\r\n\r\n@param stream the channel to check (stdin, uart1, uart2, or an open file in Read mode)\r\n@return 0 if the stream is not at EOF, or 1 otherwise.","declarations":[{"spell":"914:5-914:9|-1|1|1","param_spellings":["914:21-914:27"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":52,"usr":10081304144771498778,"detailed_name":"int fflush(PROS_FILE *stream)","short_name_offset":4,"short_name_size":6,"kind":12,"storage":1,"hover":"","comments":"\r\nFlushes the data on the specified file channel open in Write mode. This function has no\r\neffect on a communication port or a file in Read mode, as these streams are always flushed as\r\nquickly as possible by the kernel.\r\n\r\nSuccessful completion of an fflush function on a file in Write mode cannot guarantee that\r\nthe file is vaild until fclose() is used on that file descriptor.\r\n\r\n@param stream the channel to flush (an open file in Write mode)\r\n@return 0 if the data was successfully flushed, EOF otherwise","declarations":[{"spell":"926:5-926:11|-1|1|1","param_spellings":["926:23-926:29"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":53,"usr":8512605675371873570,"detailed_name":"int fgetc(PROS_FILE *stream)","short_name_offset":4,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"\r\nReads and returns one character from the specified stream, blocking until complete.\r\n\r\nDo not use fgetc() on a VEX LCD port; deadlock may occur.\r\n\r\n@param stream the stream to read (stdin, uart1, uart2, or an open file in Read mode)\r\n@return the next character from 0 to 255, or -1 if no character can be read","declarations":[{"spell":"935:5-935:10|-1|1|1","param_spellings":["935:22-935:28"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":54,"usr":9228588881439717058,"detailed_name":"char *fgets(char *str, int num, PROS_FILE *stream)","short_name_offset":6,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"\r\nReads a string from the specified stream, storing the characters into the memory at str.\r\nCharacters will be read until the specified limit is reached, a new line is found, or the\r\nend of file is reached.\r\n\r\nIf the stream is already at end of file (for files in Read mode), NULL will be returned;\r\notherwise, at least one character will be read and stored into str.\r\n\r\n@param str the location where the characters read will be stored\r\n@param num the maximum number of characters to store; at most (num - 1) characters will be\r\nread, with a null terminator ('\\0') automatically appended\r\n@param stream the channel to read (stdin, uart1, uart2, or an open file in Read mode)\r\n@return str, or NULL if zero characters could be read","declarations":[{"spell":"950:7-950:12|-1|1|1","param_spellings":["950:19-950:22","950:28-950:31","950:44-950:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":55,"usr":1190329651064351137,"detailed_name":"PROS_FILE *fopen(const char *file, const char *mode)","short_name_offset":11,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"\r\nOpens the given file in the specified mode. The file name is truncated to eight characters.\r\nOnly four files can be in use simultaneously in any given time, with at most one of those\r\nfiles in Write mode. This function does not work on communication ports; use usartInit()\r\ninstead.\r\n\r\nmode can be \"r\" or \"w\". Due to the nature of the VEX Cortex memory, the \"r+\", \"w+\", and \"a\"\r\nmodes are not supported by the file system.\r\n\r\nOpening a file that does not exist in Read mode will fail and return NULL, but opening a new\r\nfile in Write mode will create it if there is space. Opening a file that already exists in\r\nWrite mode will destroy the contents and create a new blank file if space is available.\r\n\r\nThere are important considerations when using of the file system on the VEX Cortex. Reading\r\nfrom files is safe, but writing to files should only be performed when robot actuators have\r\nbeen stopped. PROS will attempt to continue to handle events during file writes, but most\r\nuser tasks cannot execute during file writing. Powering down the VEX Cortex mid-write may\r\ncause file system corruption.\r\n\r\n@param file the file name\r\n@param mode the file mode\r\n@return a file descriptor pointing to the new file, or NULL if the file could not be opened","declarations":[{"spell":"974:13-974:18|-1|1|1","param_spellings":["974:31-974:35","974:49-974:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":56,"usr":16797718813656150372,"detailed_name":"void fprint(const char *string, PROS_FILE *stream)","short_name_offset":5,"short_name_size":6,"kind":12,"storage":1,"hover":"","comments":"\r\nPrints the simple string to the specified stream.\r\n\r\nThis method is much, much faster than fprintf() and does not add a new line like fputs().\r\nDo not use fprint() on a VEX LCD port. Use lcdSetText() instead.\r\n\r\n@param string the string to write\r\n@param stream the stream to write (stdout, uart1, uart2, or an open file in Write mode)","declarations":[{"spell":"984:6-984:12|-1|1|1","param_spellings":["984:25-984:31","984:44-984:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":57,"usr":8543234271208449349,"detailed_name":"int fputc(int value, PROS_FILE *stream)","short_name_offset":4,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"\r\nWrites one character to the specified stream.\r\n\r\nDo not use fputc() on a VEX LCD port. Use lcdSetText() instead.\r\n\r\n@param value the character to write (a value of type \"char\" can be used)\r\n@param stream the stream to write (stdout, uart1, uart2, or an open file in Write mode)\r\n@return the character written","declarations":[{"spell":"994:5-994:10|-1|1|1","param_spellings":["994:15-994:20","994:33-994:39"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":58,"usr":5293219031934828147,"detailed_name":"int fputs(const char *string, PROS_FILE *stream)","short_name_offset":4,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"\r\nBehaves the same as the \"fprint\" function, and appends a trailing newline (\"\\n\").\r\n\r\nDo not use fputs() on a VEX LCD port. Use lcdSetText() instead.\r\n\r\n@param string the string to write\r\n@param stream the stream to write (stdout, uart1, uart2, or an open file in Write mode)\r\n@return the number of characters written, excluding the new line","declarations":[{"spell":"1004:5-1004:10|-1|1|1","param_spellings":["1004:23-1004:29","1004:42-1004:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":59,"usr":12932901836596232205,"detailed_name":"size_t fread(void *ptr, size_t size, size_t count, PROS_FILE *stream)","short_name_offset":7,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"\r\nReads data from a stream into memory. Returns the number of bytes thus read.\r\n\r\nIf the memory at ptr cannot store (size * count) bytes, undefined behavior occurs.\r\n\r\n@param ptr a pointer to where the data will be stored\r\n@param size the size of each data element to read in bytes\r\n@param count the number of data elements to read\r\n@param stream the stream to read (stdout, uart1, uart2, or an open file in Read mode)\r\n@return the number of bytes successfully read","declarations":[{"spell":"1016:8-1016:13|-1|1|1","param_spellings":["1016:20-1016:23","1016:32-1016:36","1016:45-1016:50","1016:63-1016:69"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":60,"usr":1679502307055251257,"detailed_name":"int fseek(PROS_FILE *stream, long offset, int origin)","short_name_offset":4,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"\r\nSeeks within a file open in Read mode. This function will fail when used on a file in Write\r\nmode or on any communications port.\r\n\r\n@param stream the stream to seek within\r\n@param offset the location within the stream to seek\r\n@param origin the reference location for offset: SEEK_CUR, SEEK_SET, or SEEK_END\r\n@return 0 if the seek was successful, or 1 otherwise","declarations":[{"spell":"1026:5-1026:10|-1|1|1","param_spellings":["1026:22-1026:28","1026:39-1026:45","1026:51-1026:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":61,"usr":10212340708543611106,"detailed_name":"long ftell(PROS_FILE *stream)","short_name_offset":5,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"\r\nReturns the current position of the stream. This function works on files in either Read or\r\nWrite mode, but will fail on communications ports.\r\n\r\n@param stream the stream to check\r\n@return the offset of the stream, or -1 if the offset could not be determined","declarations":[{"spell":"1034:10-1034:15|-1|1|1","param_spellings":["1034:27-1034:33"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":62,"usr":9744612718401824183,"detailed_name":"size_t fwrite(const void *ptr, size_t size, size_t count, PROS_FILE *stream)","short_name_offset":7,"short_name_size":6,"kind":12,"storage":1,"hover":"","comments":"\r\nWrites data from memory to a stream. Returns the number of bytes thus written.\r\n\r\nIf the memory at ptr is not as long as (size * count) bytes, undefined behavior occurs.\r\n\r\n@param ptr a pointer to the data to write\r\n@param size the size of each data element to write in bytes\r\n@param count the number of data elements to write\r\n@param stream the stream to write (stdout, uart1, uart2, or an open file in Write mode)\r\n@return the number of bytes successfully written","declarations":[{"spell":"1046:8-1046:14|-1|1|1","param_spellings":["1046:27-1046:30","1046:39-1046:43","1046:52-1046:57","1046:70-1046:76"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":63,"usr":3190121459114055489,"detailed_name":"int getchar()","short_name_offset":4,"short_name_size":7,"kind":12,"storage":1,"hover":"","comments":"\r\nReads and returns one character from \"stdin\", which is the PC debug terminal.\r\n\r\n@return the next character from 0 to 255, or -1 if no character can be read","declarations":[{"spell":"1052:5-1052:12|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":64,"usr":16913615305470395639,"detailed_name":"void print(const char *string)","short_name_offset":5,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"\r\nPrints the simple string to the debug terminal without formatting.\r\n\r\nThis method is much, much faster than printf().\r\n\r\n@param string the string to write","declarations":[{"spell":"1060:6-1060:11|-1|1|1","param_spellings":["1060:24-1060:30"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":65,"usr":6521939288128384957,"detailed_name":"int putchar(int value)","short_name_offset":4,"short_name_size":7,"kind":12,"storage":1,"hover":"","comments":"\r\nWrites one character to \"stdout\", which is the PC debug terminal, and returns the input\r\nvalue.\r\n\r\nWhen using a wireless connection, one may need to press the spacebar before the input is\r\nvisible on the terminal.\r\n\r\n@param value the character to write (a value of type \"char\" can be used)\r\n@return the character written","declarations":[{"spell":"1071:5-1071:12|-1|1|1","param_spellings":["1071:17-1071:22"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":66,"usr":13896014003881902723,"detailed_name":"int puts(const char *string)","short_name_offset":4,"short_name_size":4,"kind":12,"storage":1,"hover":"","comments":"\r\nBehaves the same as the \"print\" function, and appends a trailing newline (\"\\n\").\r\n\r\n@param string the string to write\r\n@return the number of characters written, excluding the new line","declarations":[{"spell":"1078:5-1078:9|-1|1|1","param_spellings":["1078:22-1078:28"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":67,"usr":874801983277746107,"detailed_name":"int fprintf(PROS_FILE *stream, const char *formatString, ...)","short_name_offset":4,"short_name_size":7,"kind":12,"storage":1,"hover":"","comments":"\r\nPrints the formatted string to the specified output stream.\r\n\r\nThe specifiers supported by this minimalistic printf() function are:\r\n* @c \\%d: Signed integer in base 10 (int)\r\n* @c \\%u: Unsigned integer in base 10 (unsigned int)\r\n* @c \\%x, @c \\%X: Integer in base 16 (unsigned int, int)\r\n* @c \\%p: Pointer (void *, int *, ...)\r\n* @c \\%c: Character (char)\r\n* @c \\%s: Null-terminated string (char *)\r\n* @c \\%%: Single literal percent sign\r\n* @c \\%f: Floating-point number\r\n\r\nSpecifiers can be modified with:\r\n* @c 0: Zero-pad, instead of space-pad\r\n* @c a.b: Make the field at least \"a\" characters wide. If \"b\" is specified for \"%f\", changes the\r\n          number of digits after the decimal point\r\n* @c -: Left-align, instead of right-align\r\n* @c +: Always display the sign character (displays a leading \"+\" for positive numbers)\r\n* @c l: Ignored for compatibility\r\n\r\nInvalid format specifiers, or mismatched parameters to specifiers, cause undefined behavior.\r\nOther characters are written out verbatim. Do not use fprintf() on a VEX LCD port.\r\nUse lcdPrint() instead.\r\n\r\n@param stream the stream to write (stdout, uart1, or uart2)\r\n@param formatString the format string as specified above\r\n@return the number of characters written","declarations":[{"spell":"1109:5-1109:12|-1|1|1","param_spellings":["1109:24-1109:30","1109:44-1109:56"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":68,"usr":18381016531371734093,"detailed_name":"int printf(const char *formatString, ...)","short_name_offset":4,"short_name_size":6,"kind":12,"storage":1,"hover":"","comments":"\r\nPrints the formatted string to the debug stream (the PC terminal).\r\n\r\n@param formatString the format string as specified in fprintf()\r\n@return the number of characters written","declarations":[{"spell":"1116:5-1116:11|-1|1|1","param_spellings":["1116:24-1116:36"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":69,"usr":13410737015930399193,"detailed_name":"int snprintf(char *buffer, unsigned int limit, const char *formatString, ...)","short_name_offset":4,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"\r\nPrints the formatted string to the string buffer with the specified length limit.\r\n\r\nThe length limit, as per the C standard, includes the trailing null character, so an\r\nargument of 256 will cause a maximum of 255 non-null characters to be printed, and one null\r\nterminator in all cases.\r\n\r\n@param buffer the string buffer where characters can be placed\r\n@param limit the maximum number of characters to write\r\n@param formatString the format string as specified in fprintf()\r\n@return the number of characters stored","declarations":[{"spell":"1129:5-1129:13|-1|1|1","param_spellings":["1129:20-1129:26","1129:35-1129:40","1129:54-1129:66"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":70,"usr":2544375653554166760,"detailed_name":"int sprintf(char *buffer, const char *formatString, ...)","short_name_offset":4,"short_name_size":7,"kind":12,"storage":1,"hover":"","comments":"\r\nPrints the formatted string to the string buffer.\r\n\r\nIf the buffer is not big enough to contain the complete formatted output, undefined behavior\r\noccurs. See snprintf() for a safer version of this function.\r\n\r\n@param buffer the string buffer where characters can be placed\r\n@param formatString the format string as specified in fprintf()\r\n@return the number of characters stored","declarations":[{"spell":"1140:5-1140:12|-1|1|1","param_spellings":["1140:19-1140:25","1140:39-1140:51"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":71,"usr":4801161617075317601,"detailed_name":"void lcdClear(PROS_FILE *lcdPort)","short_name_offset":5,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"\r\nClears the LCD screen on the specified port.\r\n\r\nPrinting to a line implicitly overwrites the contents, so clearing should only be required\r\nat startup.\r\n\r\n@param lcdPort the LCD to clear, either uart1 or uart2","declarations":[{"spell":"1163:6-1163:14|-1|1|1","param_spellings":["1163:26-1163:33"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":72,"usr":13198127494853740493,"detailed_name":"void lcdInit(PROS_FILE *lcdPort)","short_name_offset":5,"short_name_size":7,"kind":12,"storage":1,"hover":"","comments":"\r\nInitializes the LCD port, but does not change the text or settings.\r\n\r\nIf the LCD was not initialized before, the text currently on the screen will be undefined.\r\nThe port will not be usable with standard serial port functions until the LCD is stopped.\r\n\r\n@param lcdPort the LCD to initialize, either uart1 or uart2","declarations":[{"spell":"1172:6-1172:13|-1|1|1","param_spellings":["1172:25-1172:32"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":73,"usr":5921786355005320309,"detailed_name":"void lcdPrint(PROS_FILE *lcdPort, unsigned char line, const char *formatString, ...)","short_name_offset":5,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1187:46-1187:54|-1|1|1","param_spellings":["1187:66-1187:73","1187:89-1187:93","1188:14-1188:26"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":74,"usr":16427099226763933776,"detailed_name":"unsigned int lcdReadButtons(PROS_FILE *lcdPort)","short_name_offset":13,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\r\nReads the user button status from the LCD display.\r\n\r\nFor example, if the left and right buttons are pushed, (1 | 4) = 5 will be returned. 0 is\r\nreturned if no buttons are pushed.\r\n\r\n@param lcdPort the LCD to poll, either uart1 or uart2\r\n@return the buttons pressed as a bit mask","declarations":[{"spell":"1199:14-1199:28|-1|1|1","param_spellings":["1199:40-1199:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":75,"usr":3771154269209407209,"detailed_name":"void lcdSetBacklight(PROS_FILE *lcdPort, _Bool backlight)","short_name_offset":5,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\r\nSets the specified LCD backlight to be on or off.\r\n\r\nTurning it off will save power but may make it more difficult to read in dim conditions.\r\n\r\n@param lcdPort the LCD to adjust, either uart1 or uart2\r\n@param backlight true to turn the backlight on, or false to turn it off","declarations":[{"spell":"1208:6-1208:21|-1|1|1","param_spellings":["1208:33-1208:40","1208:47-1208:56"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":76,"usr":15603009027707554293,"detailed_name":"void lcdSetText(PROS_FILE *lcdPort, unsigned char line, const char *buffer)","short_name_offset":5,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\r\nPrints the string buffer to the attached LCD.\r\n\r\nThe output string will be truncated as necessary to fit on the LCD screen, 16 characters\r\nwide. This function, like fprint(), is much, much faster than a formatted routine such as\r\nlcdPrint() and consumes less memory.\r\n\r\n@param lcdPort the LCD to write, either uart1 or uart2\r\n@param line the LCD line to write, either 1 or 2\r\n@param buffer the string to write","declarations":[{"spell":"1220:6-1220:16|-1|1|1","param_spellings":["1220:28-1220:35","1220:51-1220:55","1220:69-1220:75"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":77,"usr":7827240590337785338,"detailed_name":"void lcdShutdown(PROS_FILE *lcdPort)","short_name_offset":5,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\r\nShut down the specified LCD port.\r\n\r\n@param lcdPort the LCD to stop, either uart1 or uart2","declarations":[{"spell":"1226:6-1226:17|-1|1|1","param_spellings":["1226:29-1226:36"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":78,"usr":939548941409655017,"detailed_name":"TaskHandle taskCreate(TaskCode taskCode, const unsigned int stackDepth, void *parameters, const unsigned int priority)","short_name_offset":11,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\r\nCreates a new task and add it to the list of tasks that are ready to run.\r\n\r\n@param taskCode the function to execute in its own task\r\n@param stackDepth the number of variables available on the stack (4 * stackDepth bytes will\r\nbe allocated on the Cortex)\r\n@param parameters an argument passed to the taskCode function\r\n@param priority a value from TASK_PRIORITY_LOWEST to TASK_PRIORITY_HIGHEST determining the\r\ninitial priority of the task\r\n@return a handle to the created task, or NULL if an error occurred","declarations":[{"spell":"1341:12-1341:22|-1|1|1","param_spellings":["1341:32-1341:40","1341:61-1341:71","1341:79-1341:89","1342:21-1342:29"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":79,"usr":16147120831799648127,"detailed_name":"void taskDelay(const unsigned long msToDelay)","short_name_offset":5,"short_name_size":9,"kind":12,"storage":1,"hover":"","comments":"\r\nDelays the current task for a given number of milliseconds.\r\n\r\nDelaying for a period of zero will force a reschedule, where tasks of equal priority may be\r\nscheduled if available. The calling task will still be available for immediate rescheduling\r\nonce the other tasks have had their turn or if nothing of equal or higher priority is\r\navailable to be scheduled.\r\n\r\nThis is not the best method to have a task execute code at predefined intervals, as the\r\ndelay time is measured from when the delay is requested. To delay cyclically, use\r\ntaskDelayUntil().\r\n\r\n@param msToDelay the number of milliseconds to wait, with 1000 milliseconds per second","declarations":[{"spell":"1357:6-1357:15|-1|1|1","param_spellings":["1357:36-1357:45"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":80,"usr":894182014457674282,"detailed_name":"void taskDelayUntil(unsigned long *previousWakeTime, const unsigned long cycleTime)","short_name_offset":5,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\r\nDelays the current task until a specified time. The task will be unblocked\r\nat the time *previousWakeTime + cycleTime, and *previousWakeTime will be changed to reflect\r\nthe time at which the task will unblock.\r\n\r\nIf the target time is in the past, no delay occurs, but a reschedule is forced, as if\r\ntaskDelay() was called with an argument of zero. If the sum of cycleTime and\r\n*previousWakeTime overflows or underflows, undefined behavior occurs.\r\n\r\nThis function should be used by cyclical tasks to ensure a constant execution frequency.\r\nWhile taskDelay() specifies a wake time relative to the time at which the function is\r\ncalled, taskDelayUntil() specifies the absolute future time at which it wishes to unblock.\r\nCalling taskDelayUntil with the same cycleTime parameter value in a loop, with\r\npreviousWakeTime referring to a local variable initialized to millis(), will cause the\r\nloop to execute with a fixed period.\r\n\r\n@param previousWakeTime a pointer to the location storing the last unblock time, obtained\r\nby using the \"&\" operator on a variable (e.g. \"taskDelayUntil(&now, 50);\")\r\n@param cycleTime the number of milliseconds to wait, with 1000 milliseconds per second","declarations":[{"spell":"1378:6-1378:20|-1|1|1","param_spellings":["1378:36-1378:52","1378:74-1378:83"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":81,"usr":3329443340693813990,"detailed_name":"void taskDelete(TaskHandle taskToDelete)","short_name_offset":5,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\r\nKills and removes the specified task from the kernel task list.\r\n\r\nDeleting the last task will end the program, possibly leading to undesirable states as\r\nsome outputs may remain in their last set configuration.\r\n\r\nNOTE: The idle task is responsible for freeing the kernel allocated memory from tasks that\r\nhave been deleted. It is therefore important that the idle task is not starved of\r\nprocessing time. Memory allocated by the task code is not automatically freed, and should be\r\nfreed before the task is deleted.\r\n\r\n@param taskToDelete the task to kill; passing NULL kills the current task","declarations":[{"spell":"1392:6-1392:16|-1|1|1","param_spellings":["1392:28-1392:40"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":82,"usr":2052997190618620047,"detailed_name":"unsigned int taskGetCount()","short_name_offset":13,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\r\nDetermines the number of tasks that are currently being managed.\r\n\r\nThis includes all ready, blocked and suspended tasks. A task that has been deleted but not\r\nyet freed by the idle task will also be included in the count. Tasks recently created may\r\ntake one context switch to be counted.\r\n\r\n@return the number of tasks that are currently running, waiting, or suspended","declarations":[{"spell":"1402:14-1402:26|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":83,"usr":14843572523142575739,"detailed_name":"unsigned int taskGetState(TaskHandle task)","short_name_offset":13,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\r\nRetrieves the state of the specified task. Note that the state of tasks which have died may\r\nbe re-used for future tasks, causing the value returned by this function to reflect a\r\ndifferent task than possibly intended in this case.\r\n\r\n@param task Handle to the task to query. Passing NULL will query the current task status\r\n(which will, by definition, be TASK_RUNNING if this call returns)\r\n\r\n@return A value reflecting the task's status, one of the constants TASK_DEAD, TASK_RUNNING,\r\nTASK_RUNNABLE, TASK_SLEEPING, or TASK_SUSPENDED","declarations":[{"spell":"1414:14-1414:26|-1|1|1","param_spellings":["1414:38-1414:42"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":84,"usr":5502089603636133533,"detailed_name":"unsigned int taskPriorityGet(const TaskHandle task)","short_name_offset":13,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\r\nObtains the priority of the specified task.\r\n\r\n@param task the task to check; passing NULL checks the current task\r\n@return the priority of that task from 0 to TASK_MAX_PRIORITIES","declarations":[{"spell":"1421:14-1421:29|-1|1|1","param_spellings":["1421:47-1421:51"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":85,"usr":10726730293696802189,"detailed_name":"void taskPrioritySet(TaskHandle task, const unsigned int newPriority)","short_name_offset":5,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\r\nSets the priority of the specified task.\r\n\r\nA context switch may occur before the function returns if the priority being set is higher\r\nthan the currently executing task and the task being mutated is available to be scheduled.\r\n\r\n@param task the task to change; passing NULL changes the current task\r\n@param newPriority a value between TASK_PRIORITY_LOWEST and TASK_PRIORITY_HIGHEST inclusive\r\nindicating the new task priority","declarations":[{"spell":"1432:6-1432:21|-1|1|1","param_spellings":["1432:33-1432:37","1432:58-1432:69"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":86,"usr":6396946199556684488,"detailed_name":"void taskResume(TaskHandle taskToResume)","short_name_offset":5,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\r\nResumes the specified task.\r\n\r\nA task that has been suspended by one or more calls to taskSuspend() will be made available\r\nfor scheduling again by a call to taskResume(). If the task was not suspended at the time\r\nof the call to taskResume(), undefined behavior occurs.\r\n\r\n@param taskToResume the task to change; passing NULL is not allowed as the current task\r\ncannot be suspended (it is obviously running if this function is called)","declarations":[{"spell":"1443:6-1443:16|-1|1|1","param_spellings":["1443:28-1443:40"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":87,"usr":2403655669826206156,"detailed_name":"TaskHandle taskRunLoop(void (*)(void) fn, const unsigned long increment)","short_name_offset":11,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\r\nStarts a task which will periodically call the specified function.\r\n\r\nIntended for use as a quick-start skeleton for cyclic tasks with higher priority than the\r\n\"main\" tasks. The created task will have priority TASK_PRIORITY_DEFAULT + 1 with the default\r\nstack size. To customize behavior, create a task manually with the specified function.\r\n\r\nThis task will automatically terminate after one further function invocation when the robot\r\nis disabled or when the robot mode is switched.\r\n\r\n@param fn the function to call in this loop\r\n@param increment the delay between successive calls in milliseconds; the taskDelayUntil()\r\nfunction is used for accurate cycle timing\r\n@return a handle to the task, or NULL if an error occurred","declarations":[{"spell":"1459:12-1459:23|-1|1|1","param_spellings":["1459:31-1459:33","1459:62-1459:71"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":88,"usr":6312840476390196285,"detailed_name":"void taskSuspend(TaskHandle taskToSuspend)","short_name_offset":5,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\r\nSuspends the specified task.\r\n\r\nWhen suspended a task will not be scheduled, regardless of whether it might be otherwise\r\navailable to run.\r\n\r\n@param taskToSuspend the task to suspend; passing NULL suspends the current task","declarations":[{"spell":"1468:6-1468:17|-1|1|1","param_spellings":["1468:29-1468:42"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":89,"usr":14114886263842650587,"detailed_name":"Semaphore semaphoreCreate()","short_name_offset":10,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\r\nCreates a semaphore intended for synchronizing tasks. To prevent some critical code from\r\nsimultaneously modifying a shared resource, use mutexes instead.\r\n\r\nSemaphores created using this function can be accessed using the semaphoreTake() and\r\nsemaphoreGive() functions. The mutex functions must not be used on objects of this type.\r\n\r\nThis type of object does not need to have balanced take and give calls, so priority\r\ninheritance is not used. Semaphores can be signalled by an interrupt routine.\r\n\r\n@return a handle to the created semaphore","declarations":[{"spell":"1482:11-1482:26|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":90,"usr":1886609752059214075,"detailed_name":"_Bool semaphoreGive(Semaphore semaphore)","short_name_offset":6,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\r\nSignals a semaphore. Tasks waiting for a signal using semaphoreTake() will be unblocked by\r\nthis call and can continue execution.\r\n\r\nSlow processes can give semaphores when ready, and fast processes waiting to take the\r\nsemaphore will continue at that point.\r\n\r\n@param semaphore the semaphore to signal\r\n@return true if the semaphore was successfully given, or false if the semaphore was not\r\ntaken since the last give","declarations":[{"spell":"1494:6-1494:19|-1|1|1","param_spellings":["1494:30-1494:39"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":91,"usr":8820781699704441199,"detailed_name":"_Bool semaphoreTake(Semaphore semaphore, const unsigned long blockTime)","short_name_offset":6,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\r\nWaits on a semaphore. If the semaphore is already in the \"taken\" state, the current task\r\nwill wait for the semaphore to be signaled. Other tasks can run during this time.\r\n\r\n@param semaphore the semaphore to wait\r\n@param blockTime the maximum time to wait for the semaphore to be given, where -1\r\nspecifies an infinite timeout\r\n@return true if the semaphore was successfully taken, or false if the timeout expired","declarations":[{"spell":"1504:6-1504:19|-1|1|1","param_spellings":["1504:30-1504:39","1504:61-1504:70"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":92,"usr":8840270862616392162,"detailed_name":"void semaphoreDelete(Semaphore semaphore)","short_name_offset":5,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\r\nDeletes the specified semaphore. This function can be dangerous; deleting semaphores being\r\nwaited on by a task may cause deadlock or a crash.\r\n\r\n@param semaphore the semaphore to destroy","declarations":[{"spell":"1511:6-1511:21|-1|1|1","param_spellings":["1511:32-1511:41"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":93,"usr":10001498209523057087,"detailed_name":"Mutex mutexCreate()","short_name_offset":6,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\r\nCreates a mutex intended to allow only one task to use a resource at a time. For signalling\r\nand synchronization, try using semaphores.\r\n\r\nMutexes created using this function can be accessed using the mutexTake() and mutexGive()\r\nfunctions. The semaphore functions must not be used on objects of this type.\r\n\r\nThis type of object uses a priority inheritance mechanism so a task 'taking' a mutex MUST\r\nALWAYS 'give' the mutex back once the mutex is no longer required.\r\n\r\n@return a handle to the created mutex","declarations":[{"spell":"1525:7-1525:18|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":94,"usr":16903502333558930379,"detailed_name":"_Bool mutexGive(Mutex mutex)","short_name_offset":6,"short_name_size":9,"kind":12,"storage":1,"hover":"","comments":"\r\nRelinquishes a mutex so that other tasks can use the resource it guards. The mutex must be\r\nheld by the current task using a corresponding call to mutexTake.\r\n\r\n@param mutex the mutex to release\r\n@return true if the mutex was released, or false if the mutex was not already held","declarations":[{"spell":"1533:6-1533:15|-1|1|1","param_spellings":["1533:22-1533:27"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":95,"usr":2344020631271083263,"detailed_name":"_Bool mutexTake(Mutex mutex, const unsigned long blockTime)","short_name_offset":6,"short_name_size":9,"kind":12,"storage":1,"hover":"","comments":"\r\nRequests a mutex so that other tasks cannot simultaneously use the resource it guards.\r\nThe mutex must not already be held by the current task. If another task already\r\nholds the mutex, the function will wait for the mutex to be released. Other tasks can run\r\nduring this time.\r\n\r\n@param mutex the mutex to request\r\n@param blockTime the maximum time to wait for the mutex to be available, where -1\r\nspecifies an infinite timeout\r\n@return true if the mutex was successfully taken, or false if the timeout expired","declarations":[{"spell":"1545:6-1545:15|-1|1|1","param_spellings":["1545:22-1545:27","1545:49-1545:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":96,"usr":387819519041506268,"detailed_name":"void mutexDelete(Mutex mutex)","short_name_offset":5,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\r\nDeletes the specified mutex. This function can be dangerous; deleting semaphores being\r\nwaited on by a task may cause deadlock or a crash.\r\n\r\n@param mutex the mutex to destroy","declarations":[{"spell":"1552:6-1552:17|-1|1|1","param_spellings":["1552:24-1552:29"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":97,"usr":13582985887125507576,"detailed_name":"void delay(const unsigned long time)","short_name_offset":5,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"\r\nWiring-compatible alias of taskDelay().\r\n\r\n@param time the duration of the delay in milliseconds (1 000 milliseconds per second)","declarations":[{"spell":"1559:6-1559:11|-1|1|1","param_spellings":["1559:32-1559:36"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":98,"usr":13005946304084334862,"detailed_name":"void delayMicroseconds(const unsigned long us)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\r\nWait for approximately the given number of microseconds.\r\n\r\nThe method used for delaying this length of time may vary depending on the argument.\r\nThe current task will always be delayed by at least the specified period, but possibly much\r\nmore depending on CPU load. In general, this function is less reliable than delay(). Using\r\nthis function in a loop may hog processing time from other tasks.\r\n\r\n@param us the duration of the delay in microseconds (1 000 000 microseconds per second)","declarations":[{"spell":"1570:6-1570:23|-1|1|1","param_spellings":["1570:44-1570:46"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":99,"usr":18255793912538251741,"detailed_name":"unsigned long micros()","short_name_offset":14,"short_name_size":6,"kind":12,"storage":1,"hover":"","comments":"\r\nReturns the number of microseconds since Cortex power-up. There are 10^6 microseconds in a\r\nsecond, so as a 32-bit integer, this will overflow and wrap back to zero every two hours or\r\nso.\r\n\r\nThis function is Wiring-compatible.\r\n\r\n@return the number of microseconds since the Cortex was turned on or the last overflow","declarations":[{"spell":"1580:15-1580:21|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":100,"usr":8635978937798820089,"detailed_name":"unsigned long millis()","short_name_offset":14,"short_name_size":6,"kind":12,"storage":1,"hover":"","comments":"\r\nReturns the number of milliseconds since Cortex power-up. There are 1000 milliseconds in a\r\nsecond, so as a 32-bit integer, this will not overflow for 50 days.\r\n\r\nThis function is Wiring-compatible.\r\n\r\n@return the number of milliseconds since the Cortex was turned on","declarations":[{"spell":"1589:15-1589:21|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":101,"usr":8386623308702091189,"detailed_name":"void wait(const unsigned long time)","short_name_offset":5,"short_name_size":4,"kind":12,"storage":1,"hover":"","comments":"\r\nAlias of taskDelay() intended to help EasyC users.\r\n\r\n@param time the duration of the delay in milliseconds (1 000 milliseconds per second)","declarations":[{"spell":"1595:6-1595:10|-1|1|1","param_spellings":["1595:31-1595:35"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":102,"usr":13147995930584246065,"detailed_name":"void waitUntil(unsigned long *previousWakeTime, const unsigned long time)","short_name_offset":5,"short_name_size":9,"kind":12,"storage":1,"hover":"","comments":"\r\nAlias of taskDelayUntil() intended to help EasyC users.\r\n\r\n@param previousWakeTime a pointer to the last wakeup time\r\n@param time the duration of the delay in milliseconds (1 000 milliseconds per second)","declarations":[{"spell":"1602:6-1602:15|-1|1|1","param_spellings":["1602:31-1602:47","1602:69-1602:73"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":103,"usr":17697071276427321022,"detailed_name":"void watchdogInit()","short_name_offset":5,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\r\nEnables IWDG watchdog timer which will reset the cortex if it locks up due to static shock\r\nor a misbehaving task preventing the timer to be reset. Not recovering from static shock\r\nwill cause the robot to continue moving its motors indefinitely until turned off manually.\r\n\r\nThis function should only be called once in initializeIO()","declarations":[{"spell":"1610:6-1610:18|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":104,"usr":11722135754555131856,"detailed_name":"void standaloneModeEnable()","short_name_offset":5,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\r\nEnables the Cortex to run the op control task in a standalone mode- no VEXnet connection required.\r\n\r\nThis function should only be called once in initializeIO()","declarations":[{"spell":"1616:6-1616:26|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":14988124477013077861,"detailed_name":"API_H_","short_name_offset":0,"short_name_size":6,"hover":"#define API_H_","comments":"","declarations":[],"spell":"22:9-22:15|-1|1|2","extent":"22:9-22:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":1,"usr":7861957591100233454,"detailed_name":"PROS_VERSION_MAJOR","short_name_offset":0,"short_name_size":18,"hover":"#define PROS_VERSION_MAJOR 2","comments":"","declarations":[],"spell":"35:9-35:27|-1|1|2","extent":"35:9-35:29|-1|1|0","uses":[],"kind":255,"storage":0},{"id":2,"usr":821272995837085029,"detailed_name":"PROS_VERSION_MINOR","short_name_offset":0,"short_name_size":18,"hover":"#define PROS_VERSION_MINOR 12","comments":"","declarations":[],"spell":"36:9-36:27|-1|1|2","extent":"36:9-36:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":3,"usr":4844048673585569824,"detailed_name":"PROS_VERSION_PATCH","short_name_offset":0,"short_name_size":18,"hover":"#define PROS_VERSION_PATCH 2","comments":"","declarations":[],"spell":"37:9-37:27|-1|1|2","extent":"37:9-37:29|-1|1|0","uses":[],"kind":255,"storage":0},{"id":4,"usr":12836165657200166843,"detailed_name":"PROS_VERSION_STRING","short_name_offset":0,"short_name_size":19,"hover":"#define PROS_VERSION_STRING \"2.12.2\"","comments":"","declarations":[],"spell":"38:9-38:28|-1|1|2","extent":"38:9-38:37|-1|1|0","uses":[],"kind":255,"storage":0},{"id":5,"usr":18401820829061709435,"detailed_name":"JOY_DOWN","short_name_offset":0,"short_name_size":8,"hover":"#define JOY_DOWN 1","comments":"","declarations":[],"spell":"45:9-45:17|-1|1|2","extent":"45:9-45:19|-1|1|0","uses":[],"kind":255,"storage":0},{"id":6,"usr":487836281624409622,"detailed_name":"JOY_LEFT","short_name_offset":0,"short_name_size":8,"hover":"#define JOY_LEFT 2","comments":"","declarations":[],"spell":"49:9-49:17|-1|1|2","extent":"49:9-49:19|-1|1|0","uses":[],"kind":255,"storage":0},{"id":7,"usr":9861601409537569956,"detailed_name":"JOY_UP","short_name_offset":0,"short_name_size":6,"hover":"#define JOY_UP 4","comments":"","declarations":[],"spell":"53:9-53:15|-1|1|2","extent":"53:9-53:17|-1|1|0","uses":[],"kind":255,"storage":0},{"id":8,"usr":11614768622714407618,"detailed_name":"JOY_RIGHT","short_name_offset":0,"short_name_size":9,"hover":"#define JOY_RIGHT 8","comments":"","declarations":[],"spell":"57:9-57:18|-1|1|2","extent":"57:9-57:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":9,"usr":12149867815450272979,"detailed_name":"ACCEL_X","short_name_offset":0,"short_name_size":7,"hover":"#define ACCEL_X 5","comments":"","declarations":[],"spell":"61:9-61:16|-1|1|2","extent":"61:9-61:18|-1|1|0","uses":[],"kind":255,"storage":0},{"id":10,"usr":14735335308420626429,"detailed_name":"ACCEL_Y","short_name_offset":0,"short_name_size":7,"hover":"#define ACCEL_Y 6","comments":"","declarations":[],"spell":"65:9-65:16|-1|1|2","extent":"65:9-65:18|-1|1|0","uses":[],"kind":255,"storage":0},{"id":11,"usr":13431182507274246120,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["73:1-73:5|-1|1|4","82:1-82:5|-1|1|4","93:1-93:5|-1|1|4","101:1-101:5|-1|1|4","119:1-119:5|-1|1|4","292:1-292:5|-1|1|4","303:38-303:42|-1|1|4","505:1-505:5|-1|1|4","528:1-528:5|-1|1|4","537:1-537:5|-1|1|4","632:70-632:74|-1|1|4","711:1-711:5|-1|1|4","724:1-724:5|-1|1|4","737:1-737:5|-1|1|4","747:1-747:5|-1|1|4","1208:42-1208:46|-1|1|4","1494:1-1494:5|-1|1|4","1504:1-1504:5|-1|1|4","1533:1-1533:5|-1|1|4","1545:1-1545:5|-1|1|4"],"kind":0,"storage":0},{"id":12,"usr":14955099286461981905,"detailed_name":"BOARD_NR_ADC_PINS","short_name_offset":0,"short_name_size":17,"hover":"#define BOARD_NR_ADC_PINS 8","comments":"","declarations":[],"spell":"146:9-146:26|-1|1|2","extent":"146:9-146:28|-1|1|0","uses":[],"kind":255,"storage":0},{"id":13,"usr":18008245937421724731,"detailed_name":"BOARD_NR_GPIO_PINS","short_name_offset":0,"short_name_size":18,"hover":"#define BOARD_NR_GPIO_PINS 27","comments":"","declarations":[],"spell":"156:9-156:27|-1|1|2","extent":"156:9-156:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":14,"usr":13561935091615227513,"detailed_name":"HIGH","short_name_offset":0,"short_name_size":4,"hover":"#define HIGH 1","comments":"","declarations":[],"spell":"162:9-162:13|-1|1|2","extent":"162:9-162:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":15,"usr":1823918022850970323,"detailed_name":"LOW","short_name_offset":0,"short_name_size":3,"hover":"#define LOW 0","comments":"","declarations":[],"spell":"168:9-168:12|-1|1|2","extent":"168:9-168:14|-1|1|0","uses":[],"kind":255,"storage":0},{"id":16,"usr":4795253070137810946,"detailed_name":"INPUT","short_name_offset":0,"short_name_size":5,"hover":"#define INPUT 0x0A","comments":"","declarations":[],"spell":"177:9-177:14|-1|1|2","extent":"177:9-177:19|-1|1|0","uses":[],"kind":255,"storage":0},{"id":17,"usr":9623045418406597670,"detailed_name":"INPUT_ANALOG","short_name_offset":0,"short_name_size":12,"hover":"#define INPUT_ANALOG 0x00","comments":"","declarations":[],"spell":"184:9-184:21|-1|1|2","extent":"184:9-184:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":18,"usr":16992188669639977856,"detailed_name":"INPUT_FLOATING","short_name_offset":0,"short_name_size":14,"hover":"#define INPUT_FLOATING 0x04","comments":"","declarations":[],"spell":"191:9-191:23|-1|1|2","extent":"191:9-191:28|-1|1|0","uses":[],"kind":255,"storage":0},{"id":19,"usr":13469266416061291475,"detailed_name":"OUTPUT","short_name_offset":0,"short_name_size":6,"hover":"#define OUTPUT 0x01","comments":"","declarations":[],"spell":"198:9-198:15|-1|1|2","extent":"198:9-198:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":20,"usr":4512519890418221417,"detailed_name":"OUTPUT_OD","short_name_offset":0,"short_name_size":9,"hover":"#define OUTPUT_OD 0x05","comments":"","declarations":[],"spell":"205:9-205:18|-1|1|2","extent":"205:9-205:23|-1|1|0","uses":[],"kind":255,"storage":0},{"id":21,"usr":17282440652757571266,"detailed_name":"INTERRUPT_EDGE_RISING","short_name_offset":0,"short_name_size":21,"hover":"#define INTERRUPT_EDGE_RISING 1","comments":"","declarations":[],"spell":"323:9-323:30|-1|1|2","extent":"323:9-323:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":22,"usr":17975859957550466419,"detailed_name":"INTERRUPT_EDGE_FALLING","short_name_offset":0,"short_name_size":22,"hover":"#define INTERRUPT_EDGE_FALLING 2","comments":"","declarations":[],"spell":"327:9-327:31|-1|1|2","extent":"327:9-327:33|-1|1|0","uses":[],"kind":255,"storage":0},{"id":23,"usr":15023415637609681223,"detailed_name":"INTERRUPT_EDGE_BOTH","short_name_offset":0,"short_name_size":19,"hover":"#define INTERRUPT_EDGE_BOTH 3","comments":"","declarations":[],"spell":"332:9-332:28|-1|1|2","extent":"332:9-332:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":24,"usr":195571246027644805,"detailed_name":"IME_ADDR_MAX","short_name_offset":0,"short_name_size":12,"hover":"#define IME_ADDR_MAX 0x1F","comments":"","declarations":[],"spell":"463:9-463:21|-1|1|2","extent":"463:9-463:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":25,"usr":12095850334159460846,"detailed_name":"ULTRA_BAD_RESPONSE","short_name_offset":0,"short_name_size":18,"hover":"#define ULTRA_BAD_RESPONSE -1","comments":"","declarations":[],"spell":"655:9-655:27|-1|1|2","extent":"655:9-655:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":26,"usr":16772597749710432080,"detailed_name":"FILE","short_name_offset":0,"short_name_size":4,"hover":"#define FILE PROS_FILE","comments":"","declarations":[],"spell":"764:9-764:13|-1|1|2","extent":"764:9-764:23|-1|1|0","uses":[],"kind":255,"storage":0},{"id":27,"usr":13943397511919096124,"detailed_name":"SERIAL_DATABITS_8","short_name_offset":0,"short_name_size":17,"hover":"#define SERIAL_DATABITS_8 0x0000","comments":"","declarations":[],"spell":"770:9-770:26|-1|1|2","extent":"770:9-770:33|-1|1|0","uses":[],"kind":255,"storage":0},{"id":28,"usr":11901484851112289632,"detailed_name":"SERIAL_DATABITS_9","short_name_offset":0,"short_name_size":17,"hover":"#define SERIAL_DATABITS_9 0x1000","comments":"","declarations":[],"spell":"774:9-774:26|-1|1|2","extent":"774:9-774:33|-1|1|0","uses":[],"kind":255,"storage":0},{"id":29,"usr":17044100881654011068,"detailed_name":"SERIAL_STOPBITS_1","short_name_offset":0,"short_name_size":17,"hover":"#define SERIAL_STOPBITS_1 0x0000","comments":"","declarations":[],"spell":"778:9-778:26|-1|1|2","extent":"778:9-778:33|-1|1|0","uses":[],"kind":255,"storage":0},{"id":30,"usr":8959154903774585766,"detailed_name":"SERIAL_STOPBITS_2","short_name_offset":0,"short_name_size":17,"hover":"#define SERIAL_STOPBITS_2 0x2000","comments":"","declarations":[],"spell":"782:9-782:26|-1|1|2","extent":"782:9-782:33|-1|1|0","uses":[],"kind":255,"storage":0},{"id":31,"usr":9647298071236914173,"detailed_name":"SERIAL_PARITY_NONE","short_name_offset":0,"short_name_size":18,"hover":"#define SERIAL_PARITY_NONE 0x0000","comments":"","declarations":[],"spell":"786:9-786:27|-1|1|2","extent":"786:9-786:34|-1|1|0","uses":[],"kind":255,"storage":0},{"id":32,"usr":6465880515819632271,"detailed_name":"SERIAL_PARITY_EVEN","short_name_offset":0,"short_name_size":18,"hover":"#define SERIAL_PARITY_EVEN 0x0400","comments":"","declarations":[],"spell":"790:9-790:27|-1|1|2","extent":"790:9-790:34|-1|1|0","uses":[],"kind":255,"storage":0},{"id":33,"usr":8546340688553896575,"detailed_name":"SERIAL_PARITY_ODD","short_name_offset":0,"short_name_size":17,"hover":"#define SERIAL_PARITY_ODD 0x0600","comments":"","declarations":[],"spell":"794:9-794:26|-1|1|2","extent":"794:9-794:33|-1|1|0","uses":[],"kind":255,"storage":0},{"id":34,"usr":1349251876574605921,"detailed_name":"SERIAL_8N1","short_name_offset":0,"short_name_size":10,"hover":"#define SERIAL_8N1 0x0000","comments":"","declarations":[],"spell":"798:9-798:19|-1|1|2","extent":"798:9-798:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":35,"usr":12958540120217169304,"detailed_name":"stdout","short_name_offset":0,"short_name_size":6,"hover":"#define stdout ((PROS_FILE *)3)","comments":"","declarations":[],"spell":"833:9-833:15|-1|1|2","extent":"833:9-833:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":36,"usr":8563082443484669008,"detailed_name":"stdin","short_name_offset":0,"short_name_size":5,"hover":"#define stdin ((PROS_FILE *)3)","comments":"","declarations":[],"spell":"837:9-837:14|-1|1|2","extent":"837:9-837:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":37,"usr":7767637991394093952,"detailed_name":"uart1","short_name_offset":0,"short_name_size":5,"hover":"#define uart1 ((PROS_FILE *)1)","comments":"","declarations":[],"spell":"841:9-841:14|-1|1|2","extent":"841:9-841:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":38,"usr":3392671585876495574,"detailed_name":"uart2","short_name_offset":0,"short_name_size":5,"hover":"#define uart2 ((PROS_FILE *)2)","comments":"","declarations":[],"spell":"845:9-845:14|-1|1|2","extent":"845:9-845:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":39,"usr":10009486426574945427,"detailed_name":"EOF","short_name_offset":0,"short_name_size":3,"hover":"#define EOF ((int)-1)","comments":"","declarations":[],"spell":"851:9-851:12|-1|1|2","extent":"851:9-851:22|-1|1|0","uses":[],"kind":255,"storage":0},{"id":40,"usr":10055771454338098299,"detailed_name":"SEEK_SET","short_name_offset":0,"short_name_size":8,"hover":"#define SEEK_SET 0","comments":"","declarations":[],"spell":"859:9-859:17|-1|1|2","extent":"859:9-859:19|-1|1|0","uses":[],"kind":255,"storage":0},{"id":41,"usr":15403623296216982182,"detailed_name":"SEEK_CUR","short_name_offset":0,"short_name_size":8,"hover":"#define SEEK_CUR 1","comments":"","declarations":[],"spell":"866:9-866:17|-1|1|2","extent":"866:9-866:19|-1|1|0","uses":[],"kind":255,"storage":0},{"id":42,"usr":10523314304863366139,"detailed_name":"SEEK_END","short_name_offset":0,"short_name_size":8,"hover":"#define SEEK_END 2","comments":"","declarations":[],"spell":"873:9-873:17|-1|1|2","extent":"873:9-873:19|-1|1|0","uses":[],"kind":255,"storage":0},{"id":43,"usr":10822238524573550590,"detailed_name":"LCD_BTN_LEFT","short_name_offset":0,"short_name_size":12,"hover":"#define LCD_BTN_LEFT 1","comments":"","declarations":[],"spell":"1145:9-1145:21|-1|1|2","extent":"1145:9-1145:23|-1|1|0","uses":[],"kind":255,"storage":0},{"id":44,"usr":10546137744603449641,"detailed_name":"LCD_BTN_CENTER","short_name_offset":0,"short_name_size":14,"hover":"#define LCD_BTN_CENTER 2","comments":"","declarations":[],"spell":"1149:9-1149:23|-1|1|2","extent":"1149:9-1149:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":45,"usr":7936256804146802507,"detailed_name":"LCD_BTN_RIGHT","short_name_offset":0,"short_name_size":13,"hover":"#define LCD_BTN_RIGHT 4","comments":"","declarations":[],"spell":"1153:9-1153:22|-1|1|2","extent":"1153:9-1153:24|-1|1|0","uses":[],"kind":255,"storage":0},{"id":46,"usr":14942295499192416319,"detailed_name":"TASK_MAX","short_name_offset":0,"short_name_size":8,"hover":"#define TASK_MAX 16","comments":"","declarations":[],"spell":"1237:9-1237:17|-1|1|2","extent":"1237:9-1237:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":47,"usr":4747208545224749687,"detailed_name":"TASK_MAX_PRIORITIES","short_name_offset":0,"short_name_size":19,"hover":"#define TASK_MAX_PRIORITIES 6","comments":"","declarations":[],"spell":"1243:9-1243:28|-1|1|2","extent":"1243:9-1243:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":48,"usr":12233189707592468847,"detailed_name":"TASK_PRIORITY_LOWEST","short_name_offset":0,"short_name_size":20,"hover":"#define TASK_PRIORITY_LOWEST 0","comments":"","declarations":[],"spell":"1248:9-1248:29|-1|1|2","extent":"1248:9-1248:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":49,"usr":10095824662317104395,"detailed_name":"TASK_PRIORITY_DEFAULT","short_name_offset":0,"short_name_size":21,"hover":"#define TASK_PRIORITY_DEFAULT 2","comments":"","declarations":[],"spell":"1254:9-1254:30|-1|1|2","extent":"1254:9-1254:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":50,"usr":7421922099596474017,"detailed_name":"TASK_PRIORITY_HIGHEST","short_name_offset":0,"short_name_size":21,"hover":"#define TASK_PRIORITY_HIGHEST (TASK_MAX_PRIORITIES - 1)","comments":"","declarations":[],"spell":"1259:9-1259:30|-1|1|2","extent":"1259:9-1259:56|-1|1|0","uses":[],"kind":255,"storage":0},{"id":51,"usr":13231100496905588707,"detailed_name":"TASK_DEFAULT_STACK_SIZE","short_name_offset":0,"short_name_size":23,"hover":"#define TASK_DEFAULT_STACK_SIZE 512","comments":"","declarations":[],"spell":"1267:9-1267:32|-1|1|2","extent":"1267:9-1267:36|-1|1|0","uses":[],"kind":255,"storage":0},{"id":52,"usr":11274941092979388503,"detailed_name":"TASK_MINIMAL_STACK_SIZE","short_name_offset":0,"short_name_size":23,"hover":"#define TASK_MINIMAL_STACK_SIZE 64","comments":"","declarations":[],"spell":"1275:9-1275:32|-1|1|2","extent":"1275:9-1275:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":53,"usr":10504347916959034277,"detailed_name":"TASK_DEAD","short_name_offset":0,"short_name_size":9,"hover":"#define TASK_DEAD 0","comments":"","declarations":[],"spell":"1280:9-1280:18|-1|1|2","extent":"1280:9-1280:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":54,"usr":3567173390481769509,"detailed_name":"TASK_RUNNING","short_name_offset":0,"short_name_size":12,"hover":"#define TASK_RUNNING 1","comments":"","declarations":[],"spell":"1284:9-1284:21|-1|1|2","extent":"1284:9-1284:23|-1|1|0","uses":[],"kind":255,"storage":0},{"id":55,"usr":8463304261775439458,"detailed_name":"TASK_RUNNABLE","short_name_offset":0,"short_name_size":13,"hover":"#define TASK_RUNNABLE 2","comments":"","declarations":[],"spell":"1289:9-1289:22|-1|1|2","extent":"1289:9-1289:24|-1|1|0","uses":[],"kind":255,"storage":0},{"id":56,"usr":14128618141141266737,"detailed_name":"TASK_SLEEPING","short_name_offset":0,"short_name_size":13,"hover":"#define TASK_SLEEPING 3","comments":"","declarations":[],"spell":"1294:9-1294:22|-1|1|2","extent":"1294:9-1294:24|-1|1|0","uses":[],"kind":255,"storage":0},{"id":57,"usr":8856253372446115268,"detailed_name":"TASK_SUSPENDED","short_name_offset":0,"short_name_size":14,"hover":"#define TASK_SUSPENDED 4","comments":"","declarations":[],"spell":"1298:9-1298:23|-1|1|2","extent":"1298:9-1298:25|-1|1|0","uses":[],"kind":255,"storage":0}]}